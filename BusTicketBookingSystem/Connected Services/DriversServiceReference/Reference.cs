//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BusTicketBookingSystem.DriversServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DriversServiceReference.IDriversService")]
    public interface IDriversService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDriversService/GetAllDrivers", ReplyAction="http://tempuri.org/IDriversService/GetAllDriversResponse")]
        BusTicketBookingSystem.Entities.Models.Driver[] GetAllDrivers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDriversService/GetAllDrivers", ReplyAction="http://tempuri.org/IDriversService/GetAllDriversResponse")]
        System.Threading.Tasks.Task<BusTicketBookingSystem.Entities.Models.Driver[]> GetAllDriversAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDriversService/GetDriverById", ReplyAction="http://tempuri.org/IDriversService/GetDriverByIdResponse")]
        BusTicketBookingSystem.Entities.Models.Driver GetDriverById(int DriverId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDriversService/GetDriverById", ReplyAction="http://tempuri.org/IDriversService/GetDriverByIdResponse")]
        System.Threading.Tasks.Task<BusTicketBookingSystem.Entities.Models.Driver> GetDriverByIdAsync(int DriverId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDriversService/AddDriver", ReplyAction="http://tempuri.org/IDriversService/AddDriverResponse")]
        int AddDriver(string Name, string SerialNumber, string DriverLicence, string PhoneNumber, string EmailAddress, bool IsAvailable);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDriversService/AddDriver", ReplyAction="http://tempuri.org/IDriversService/AddDriverResponse")]
        System.Threading.Tasks.Task<int> AddDriverAsync(string Name, string SerialNumber, string DriverLicence, string PhoneNumber, string EmailAddress, bool IsAvailable);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDriversService/UpdateDriver", ReplyAction="http://tempuri.org/IDriversService/UpdateDriverResponse")]
        int UpdateDriver(int DriverId, string Name, string SerialNumber, string DriverLicence, string PhoneNumber, string EmailAddress, bool IsAvailable);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDriversService/UpdateDriver", ReplyAction="http://tempuri.org/IDriversService/UpdateDriverResponse")]
        System.Threading.Tasks.Task<int> UpdateDriverAsync(int DriverId, string Name, string SerialNumber, string DriverLicence, string PhoneNumber, string EmailAddress, bool IsAvailable);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDriversService/DeleteDriverById", ReplyAction="http://tempuri.org/IDriversService/DeleteDriverByIdResponse")]
        int DeleteDriverById(int DriverId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDriversService/DeleteDriverById", ReplyAction="http://tempuri.org/IDriversService/DeleteDriverByIdResponse")]
        System.Threading.Tasks.Task<int> DeleteDriverByIdAsync(int DriverId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDriversServiceChannel : BusTicketBookingSystem.DriversServiceReference.IDriversService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DriversServiceClient : System.ServiceModel.ClientBase<BusTicketBookingSystem.DriversServiceReference.IDriversService>, BusTicketBookingSystem.DriversServiceReference.IDriversService {
        
        public DriversServiceClient() {
        }
        
        public DriversServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DriversServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DriversServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DriversServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public BusTicketBookingSystem.Entities.Models.Driver[] GetAllDrivers() {
            return base.Channel.GetAllDrivers();
        }
        
        public System.Threading.Tasks.Task<BusTicketBookingSystem.Entities.Models.Driver[]> GetAllDriversAsync() {
            return base.Channel.GetAllDriversAsync();
        }
        
        public BusTicketBookingSystem.Entities.Models.Driver GetDriverById(int DriverId) {
            return base.Channel.GetDriverById(DriverId);
        }
        
        public System.Threading.Tasks.Task<BusTicketBookingSystem.Entities.Models.Driver> GetDriverByIdAsync(int DriverId) {
            return base.Channel.GetDriverByIdAsync(DriverId);
        }
        
        public int AddDriver(string Name, string SerialNumber, string DriverLicence, string PhoneNumber, string EmailAddress, bool IsAvailable) {
            return base.Channel.AddDriver(Name, SerialNumber, DriverLicence, PhoneNumber, EmailAddress, IsAvailable);
        }
        
        public System.Threading.Tasks.Task<int> AddDriverAsync(string Name, string SerialNumber, string DriverLicence, string PhoneNumber, string EmailAddress, bool IsAvailable) {
            return base.Channel.AddDriverAsync(Name, SerialNumber, DriverLicence, PhoneNumber, EmailAddress, IsAvailable);
        }
        
        public int UpdateDriver(int DriverId, string Name, string SerialNumber, string DriverLicence, string PhoneNumber, string EmailAddress, bool IsAvailable) {
            return base.Channel.UpdateDriver(DriverId, Name, SerialNumber, DriverLicence, PhoneNumber, EmailAddress, IsAvailable);
        }
        
        public System.Threading.Tasks.Task<int> UpdateDriverAsync(int DriverId, string Name, string SerialNumber, string DriverLicence, string PhoneNumber, string EmailAddress, bool IsAvailable) {
            return base.Channel.UpdateDriverAsync(DriverId, Name, SerialNumber, DriverLicence, PhoneNumber, EmailAddress, IsAvailable);
        }
        
        public int DeleteDriverById(int DriverId) {
            return base.Channel.DeleteDriverById(DriverId);
        }
        
        public System.Threading.Tasks.Task<int> DeleteDriverByIdAsync(int DriverId) {
            return base.Channel.DeleteDriverByIdAsync(DriverId);
        }
    }
}
